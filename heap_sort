#include <iostream>
#include<bits/stdc++.h>
using namespace std;
class heap{
  public:
  int * arr;
  int capacity;
  int size ;

  heap(int capacity){
    this->arr = new int[capacity];
    this->capacity = capacity;
    this->size = 1;
  }

  void insert(int element){
    if(size==capacity){
      cout<<"heap overflow"<<endl;
      return;

    }
    size++;
    int index = size;
    arr[index] = element;
    while(index > 1){
      int paraentIndex = index/2;
      if(arr[index] > arr[paraentIndex]){
        swap(arr[index],arr[paraentIndex]);
        index = paraentIndex;
      }
      else{
        break;
      }
    }

  }

 int deletion(){
   int answer = arr[1];

   //assign first element to its last elemnt of the heap
   arr[1] = arr[size];
   //now delete that perticular element 
   size--;

   int index = 1;
   while(index < size){
     int leftindex = 2 * index;
     int rightindex =2 * index + 1;

     int largestIndex = index;
     if(leftindex <= size && arr[largestIndex] < arr[leftindex]){
       largestIndex = leftindex;
     }
     if(rightindex <= size && arr[largestIndex] < arr[rightindex]){
       largestIndex = rightindex;
     }

     if(index == largestIndex){
       break;
     }
     else{
       swap(arr[index] , arr[largestIndex]);
       index = largestIndex;
     }
   }
   return answer;

   
 }
 
 void print(){
  cout<<"printing heap :"<<endl;
  for(int i=1;i<=size;i++){
    cout<<arr[i]<<" ";
  }
}
};
void heapify(int * arr , int n , int index){
  int leftIndex = 2 * index;
  int rightIndex = 2 * index + 1;
  int largestIndex = index;

  if(  leftIndex <= n && arr[leftIndex] > arr[largestIndex]){
    largestIndex = leftIndex;

  }
  if(  rightIndex <=n && arr[rightIndex] > arr[largestIndex]){
    largestIndex = rightIndex;
  }
  if(index != largestIndex){
    swap(arr[largestIndex],arr[index]);
    index = largestIndex;
    heapify(arr,n,index);
  }

 }
 void buildheap(int arr[],int n){
  for(int index = n/2 ; index > 0;index--){
    heapify(arr,n,index);
  }

 }
 void heapsort(int arr[] , int n){
  while(n!=1){
    swap(arr[1],arr[n]);
    n--;
    heapify(arr,n,1);
  }
 }
int main() {
  // heap h1(20);
  // h1.insert(10);
  // h1.insert(20);
  // h1.insert(5);
  // h1.insert(11);
  // h1.insert(6);
  // h1.print();

  // int ans = h1.deletion();
  // cout<<endl;
  // cout<<"deleted element : "<<ans<<endl;
  // h1.print();

  int arr[] = {5,10,15,20,25,12};
  int index = 3;
  int n = 6;
  // heapify(arr,n,index);

  buildheap(arr,n);
  cout<<"printing heap : "<<endl;

  for(int i=1;i<=n;i++){
    cout<<arr[i]<<" ";
  }cout<<endl;

  cout<<"sorting heap : "<<endl;
 
  
  heapsort(arr,n);

   for(int i=1;i<=6;i++){
    cout<<arr[i]<<" ";
  }


  


}
